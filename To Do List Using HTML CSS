<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <title>To-Do List</title>
    <style>
        .hover-expand {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .hover-expand:hover {
            transform: scale(1.5);
            box-shadow: 0 0 10px rgba(255, 105, 180, 0.8);
        }
        .custom-button {
            padding: 1.3em 3em;
            font-size: 9px;
            text-transform: uppercase;
            letter-spacing: 2.5px;
            font-weight: 600;
            color: #1f1e1e;
            background-color: #fff;
            border: none;
            border-radius: 40px;
            box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease 0s;
            cursor: pointer;
            outline: none;
            text-align: center;
            display: inline-block;
        }
        .custom-button:hover {
            background-color: #23c483;
            box-shadow: 0px 15px 20px rgba(46, 229, 157, 0.4);
            color: #fff;
            transform: translateY(-7px);
        }
        .custom-button:active {
            transform: translateY(-1px);
        }
       
    </style>
</head>
<body>
    <div class="flex justify-center items-center min-h-screen bg-zinc-800 dark:bg-zinc-900">
        <div class="bg-zinc-900 dark:bg-zinc-800 p-6 rounded-lg shadow-lg w-80">
            <h2 class="text-white dark:text-zinc-200 text-xl font-bold mb-4">To Do List</h2>
            <div class="mb-4 flex items-center">
                <input type="text" id="new-task" class="w-full p-2 rounded-full shadow-inner bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-gray-200 placeholder-gray-400 dark:placeholder-gray-600 mr-2" placeholder="Write here...">
                <button id="submit-task" class="custom-button">Add Task</button>
            </div>
            <div class="mb-4">
                 <select id="priority-select" class="w-full p-2 rounded-full shadow-inner bg-zinc-700 dark:bg-zinc-700 text-white dark:text-zinc-200 mb-2">
                    <option value="low">Low Priority</option>
                    <option value="medium">Medium Priority</option>
                    <option value="high">High Priority</option>
                </select>
                <select id="category-select" class="w-full p-2 rounded-full shadow-inner bg-zinc-700 dark:bg-zinc-700 text-white dark:text-zinc-200 mb-2">
                    <option value="work">Work</option>
                    <option value="personal">Personal</option>
                    <option value="shopping">Shopping</option>
                </select>
                <input type="date" id="due-date" class="w-full p-2 rounded-full shadow-inner bg-zinc-700 dark:bg-zinc-700 text-white dark:text-zinc-200 mb-2">
            </div>
            <ul id="task-list" class="space-y-3"></ul>
        </div>
            <ul id="task-list" class="space-y-3"></ul>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const taskList = document.getElementById('task-list');
            const newTaskInput = document.getElementById('new-task');
            const prioritySelect = document.getElementById('priority-select');
            const categorySelect = document.getElementById('category-select');
            const dueDateInput = document.getElementById('due-date');
            const submitButton = document.getElementById('submit-task');

            function addTask(taskText, priority, category, dueDate) {
                const taskItem = document.createElement('li');
                taskItem.className = `task-item flex flex-col items-start bg-blue-500 dark:bg-blue-700 text-white dark:text-zinc-200 p-2 rounded-lg shadow-lg`;

                const taskContent = document.createElement('div');
                taskContent.className = 'flex justify-between items-center w-full';

                const taskDetails = document.createElement('span');
                taskDetails.textContent = taskText;
                taskContent.appendChild(taskDetails);

                const buttonsContainer = document.createElement('div');
                buttonsContainer.className = 'flex space-x-2';

                const completeButton = document.createElement('button');
                completeButton.className = 'text-green-400 dark:text-green-400 hover:text-green-200 dark:hover:text-green-600 ml-4 font-bold hover-expand';
                completeButton.innerHTML = 'ðŸ—¸';
                completeButton.style.marginRight="15px";
                completeButton.addEventListener('click', () => {
                    taskItem.classList.toggle('line-through');
                });

                const deleteButton = document.createElement('button');
                deleteButton.className = 'text-red-500 dark:text-pink-400 hover:text-pink-700 dark:hover:text-pink-600 ml-3 font-bold hover-expand';
                deleteButton.innerHTML = 'X';
                deleteButton.addEventListener('click', () => {
                    taskList.removeChild(taskItem);
                });

                buttonsContainer.appendChild(completeButton);
                buttonsContainer.appendChild(deleteButton);

                taskContent.appendChild(buttonsContainer);

                const taskMeta = document.createElement('div');
                taskMeta.className = 'text-sm mt-1';

                const prioritySpan = document.createElement('span');
                prioritySpan.textContent = `Priority: ${priority}`;
                prioritySpan.className = 'block';
                taskMeta.appendChild(prioritySpan);

                const categorySpan = document.createElement('span');
                categorySpan.textContent = `Category: ${category}`;
                categorySpan.className = 'block';
                taskMeta.appendChild(categorySpan);

                const dueDateSpan = document.createElement('span');
                dueDateSpan.textContent = `Due: ${dueDate}`;
                dueDateSpan.className = 'block';
                taskMeta.appendChild(dueDateSpan);

                taskItem.appendChild(taskContent);
                taskItem.appendChild(taskMeta);
                taskList.appendChild(taskItem);

                // Clear input fields after adding task
                newTaskInput.value = '';
                prioritySelect.value = 'low';
                categorySelect.value = 'work';
                dueDateInput.value = '';
            }

            function showErrorMessage(message) {
                const errorMessage = document.createElement('div');
                errorMessage.className = 'text-red-500 text-sm mt-2';
                errorMessage.textContent = message;
               

                const container = document.querySelector('.bg-zinc-900');
                container.appendChild(errorMessage);

                setTimeout(() => {
                    errorMessage.remove();
                }, 3000);
            }

            submitButton.addEventListener('click', () => {
                if (newTaskInput.value.trim() !== '') {
                    addTask(newTaskInput.value.trim(), prioritySelect.value, categorySelect.value, dueDateInput.value);
                } else {
                    showErrorMessage('Please create a task before submitting.');
                }
            });

            newTaskInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && newTaskInput.value.trim() !== '') {
                    newTaskInput.blur(); // Remove focus from input to prevent re-triggering on Enter
                    addTask(newTaskInput.value.trim(), prioritySelect.value, categorySelect.value, dueDateInput.value);
                } else if (e.key === 'Enter' && newTaskInput.value.trim() === '') {
                    showErrorMessage('Please create a task before submitting.');
                }
            });

            dueDateInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault(); // Prevent form submission
                    dueDateInput.blur(); // Remove focus from input to prevent re-triggering on Enter
                    if (newTaskInput.value.trim() !== '') {
                        addTask(newTaskInput.value.trim(), prioritySelect.value, categorySelect.value, dueDateInput.value);
                    } else {
                        showErrorMessage('Please create a task before submitting.');
                    }
                }
            });
        });
    </script>
</body>
</html>
